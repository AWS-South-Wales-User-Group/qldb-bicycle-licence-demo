service: qldb-bicycle-licence

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  logRetentionInDays: 7 # Set the default RetentionInDays for a CloudWatch LogGroup
  tracing:
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  apiGateway:
    restApiId: !ImportValue QldbApiGatewayDemo-restApiId
    restApiRootResourceId: !ImportValue QldbApiGatewayDemo-rootResourceId
  environment:
    LOG_LEVEL: INFO
    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.2
    POWERTOOLS_METRICS_NAMESPACE: qldb-bicycle-licence
    AWS_NODEJS_CONNECTION_REUSE_ENABLED	: "1"
    LEDGER_NAME: 
      Ref: qldbLedger
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - qldb:SendCommand
          Resource: 
            - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}'

        - Effect: "Allow"
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: "*" # Restrict resource to minimum required

plugins:
  - serverless-iam-roles-per-function
  - serverless-esbuild

functions:

  createLicence:
    name: create-bicycle-licence-${self:provider.stage}
    handler: functions/create-licence.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-createLicence
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLInsert
          - qldb:PartiQLSelect
          - qldb:PartiQLUpdate
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId

  updateLicence:
    name: update-bicycle-licence-${self:provider.stage}
    handler: functions/update-licence.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-updateLicence
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLSelect
          - qldb:PartiQLUpdate
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId
  
  updateContact:
    name: update-bicycle-contact-${self:provider.stage}
    handler: functions/update-contact.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-updateContact
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLSelect
          - qldb:PartiQLUpdate
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences/contact
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId

  getLicence:
    name: get-bicycle-licence-${self:provider.stage}
    handler: functions/get-licence.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-getLicence
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLSelect
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences/{licenceid}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId

  getLicenceHistory:
    name: get-bicycle-licence-history-${self:provider.stage}
    handler: functions/get-licence-history.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-getLicenceHistory
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLHistoryFunction
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences/history/{licenceid}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId

  deleteLicence:
    name: delete-bicycle-licence-${self:provider.stage}
    handler: functions/delete-licence.handler
    environment:
      POWERTOOLS_SERVICE_NAME: qldb-deleteLicence
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLSelect
          - qldb:PartiQLDelete
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/table/*'
    events:
      - http:
          path: /licences
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue QldbApiGatewayDemo-ApiGatewayAuthorizerId
            
  createQldbDemoTable:
    name: qldb-licence-table-${self:provider.stage}
    handler: functions/createQldbTable.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLCreateTable
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/*'
    memorySize: 256
    timeout: 6
    environment:
      LICENCE_TABLE_NAME: BicycleLicence

  createQldbDemoIndex:
    name: qldb-licence-index-${self:provider.stage}
    handler: functions/createQldbIndex.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow       
        Action: 
          - qldb:PartiQLCreateIndex
        Resource: 
          - !Sub 'arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/qldb-bicycle-licence-${self:provider.stage}/*'
    memorySize: 256
    timeout: 6
    environment:
      TABLE_NAME: BicycleLicence
      INDEX_NAME_1: licenceId
      INDEX_NAME_2: email
      INDEX_NAME_3: userId


resources:
  Resources:
    qldbLedger:
      Type: AWS::QLDB::Ledger
      Properties:
        Name: qldb-bicycle-licence-${self:provider.stage}
        DeletionProtection: false
        PermissionsMode: STANDARD
        Tags:
          - 
            Key: name
            Value: qldb-bicycle-licence-demo

    qldbTable:
      Type: Custom::qldbTable
      DependsOn: qldbLedger
      Properties:
        ServiceToken: !GetAtt CreateQldbDemoTableLambdaFunction.Arn
        Version: 1.1  #change this to force redeploy

    qldbIndex:
      Type: Custom::qldbIndexes
      DependsOn: qldbTable
      Properties:
        ServiceToken: !GetAtt CreateQldbDemoIndexLambdaFunction.Arn
        Version: 1.1  #change this to force redeploy 
  
  Outputs:

    qldbBicycleLicenceLedger:
      Value:
        Ref: qldbLedger
      Export:
        Name: qldb-bicycle-licence-demo

    qldbBicycleLicenceStage:
      Value: ${self:provider.stage}
      Export:
        Name: qldb-bicycle-licence-stage